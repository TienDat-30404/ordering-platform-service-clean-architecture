spring:
  application:
    name: order-service
  order:
    saga:
      reply:
        topic: order.saga.reply
    service:
      group: order-service-group

  kafka:
    bootstrap-servers: kafka:9092

    producer:
      acks: all
      retries: 3
      delivery-timeout-ms: 120000
      request-timeout-ms: 30000
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

    consumer:
      group-id: order-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties: { }   # <-- đảm bảo không còn spring.json.*

  datasource:
    url: jdbc:postgresql://order-db:5432/order_service_clean_architecture
    username: postgres
    password:
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate.format_sql: true

server:
  port: 8080

restaurant-service:
  url: http://localhost:8081

eureka:
  client:
    service-url:
      defaultZone: http://discovery-server:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true

logging:
  level:
    com.example.demo.adapters.out.external.api.RestaurantServiceApi: DEBUG
    feign.Logger: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    prometheus:
      enabled: true