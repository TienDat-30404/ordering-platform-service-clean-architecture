services:
  # -------------------- Monitoring --------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
    command: ['--config.file=/etc/prometheus/prometheus.yml']
    restart: unless-stopped
    networks: [microservice-net]

  # -------------------- Databases ---------------------
  order-db:
    image: postgres:15-alpine
    container_name: order_db_container
    environment:
      POSTGRES_DB: order_service_clean_architecture
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d order_service_clean_architecture"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks: [microservice-net]

  restaurant-db:
    image: postgres:15-alpine
    container_name: restaurant_db_container
    environment:
      POSTGRES_DB: restaurant_service_clean_architecture
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - restaurant_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d restaurant_service_clean_architecture"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks: [microservice-net]

  user-db:
    image: postgres:15-alpine
    container_name: user_db_container
    environment:
      POSTGRES_DB: user_service_clean_architecture
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5436:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_service_clean_architecture"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks: [microservice-net]

  payment-db:
    image: postgres:15-alpine
    container_name: payment_db_container
    environment:
      POSTGRES_DB: payment_service_clean_architecture
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d payment_service_clean_architecture"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks: [microservice-net]

  # -------------------- Infra: Discovery / Gateway ----
  discovery-server:
    container_name: discovery-server
    image: eclipse-temurin:21-jre-alpine
    ports: [ "8761:8761" ]
    environment:
      SERVER_PORT: 8761
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    volumes:
      - ./discovery_eureka/target:/app
    working_dir: /app
    command: [ "sh","-c","ls -l /app && java -jar /app/*SNAPSHOT.jar" ]
    restart: unless-stopped
    networks: [ microservice-net ]

  api-gateway:
    container_name: api-gateway
    image: eclipse-temurin:21-jre-alpine
    ports:
      - "8079:8079"
    depends_on:
      discovery-server:
        condition: service_started
      redis:
        condition: service_started
    environment:
      SERVER_PORT: "8079"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
    volumes:
      - ./api-gateway/target/api-gateway-0.0.1-SNAPSHOT.jar:/app/app.jar:ro
    working_dir: /app
    command: [ "java","-jar","/app/app.jar" ]
    restart: unless-stopped
    networks: [ microservice-net ]



  # -------------------- Services ----------------------
  order-service:
    container_name: order-service
    image: eclipse-temurin:21-jre-alpine
    ports:
      - "8081:8080"
    depends_on:
      order-db:
        condition: service_healthy
      kafka:
        condition: service_started
      discovery-server:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: order-service
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_ACKS: all
      SPRING_KAFKA_PRODUCER_RETRIES: 5
      SPRING_KAFKA_PRODUCER_PROPERTIES_ENABLE_IDEMPOTENCE: "true"
      SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: 5
      SPRING_KAFKA_PRODUCER_PROPERTIES_DELIVERY_TIMEOUT_MS: 120000
      SPRING_KAFKA_CONSUMER_GROUP_ID: order-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      # DB
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order_service_clean_architecture
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      # Server
      SERVER_PORT: 8080
      # Eureka
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    volumes:
      - ./order-service/target/order-service-1.0-SNAPSHOT.jar:/app/app.jar
    command: ["java","-jar","/app/app.jar"]
    restart: unless-stopped
    networks: [microservice-net]

  restaurant-service:
    container_name: restaurant-service
    image: eclipse-temurin:21-jre-alpine
    ports:
      - "8082:8080"
    depends_on:
      restaurant-db:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
      discovery-server:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: restaurant-service
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_ACKS: all
      SPRING_KAFKA_PRODUCER_RETRIES: 5
      SPRING_KAFKA_PRODUCER_PROPERTIES_ENABLE_IDEMPOTENCE: "true"
      SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: 5
      SPRING_KAFKA_PRODUCER_PROPERTIES_DELIVERY_TIMEOUT_MS: 120000
      SPRING_KAFKA_CONSUMER_GROUP_ID: restaurant-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      # DB
      SPRING_DATASOURCE_URL: jdbc:postgresql://restaurant-db:5432/restaurant_service_clean_architecture
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      # Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      # Server
      SERVER_PORT: 8080
      # Eureka
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    volumes:
      - ./restaurant-service/target/restaurant-service-1.0-SNAPSHOT.jar:/app/app.jar
    command: ["java","-jar","/app/app.jar"]
    restart: unless-stopped
    networks: [microservice-net]

  payment-service:
    container_name: payment-service
    image: eclipse-temurin:21-jre-alpine
    ports:
      - "8083:8080"
    depends_on:
      payment-db:
        condition: service_healthy
      kafka:
        condition: service_started
      discovery-server:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: payment-service
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_ACKS: all
      SPRING_KAFKA_PRODUCER_RETRIES: 5
      SPRING_KAFKA_PRODUCER_PROPERTIES_ENABLE_IDEMPOTENCE: "true"
      SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: 5
      SPRING_KAFKA_PRODUCER_PROPERTIES_DELIVERY_TIMEOUT_MS: 120000
      SPRING_KAFKA_CONSUMER_GROUP_ID: payment-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      # DB (ghi đè application.yml nếu khác)
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-db:5432/payment_service_clean_architecture
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # Server
      SERVER_PORT: 8080
      # Eureka
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    volumes:
      - ./payment-service/target/payment-service-1.0-SNAPSHOT.jar:/app/app.jar
    command: ["java","-jar","/app/app.jar"]
    restart: unless-stopped
    networks: [microservice-net]

  user-service:
    container_name: user-service
    image: eclipse-temurin:21-jre-alpine
    ports:
      - "8084:8080"
    depends_on:
      user-db:
        condition: service_healthy
      discovery-server:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: user-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user_service_clean_architecture
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    volumes:
      - ./user-service/target/user-service-1.0-SNAPSHOT.jar:/app/app.jar
    command: ["java","-jar","/app/app.jar"]
    restart: unless-stopped
    networks: [microservice-net]

  # -------------------- Kafka & Zookeeper --------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks: [microservice-net]

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: unless-stopped
    networks: [microservice-net]

  redis:
    container_name: redis-clean-architecture
    image: redis:7
    ports:
      - "6379:6379"
    networks: [microservice-net]

# -------------------- Volumes & Network ----------------
volumes:
  order_db_data:
  restaurant_db_data:
  payment_db_data:
  user_db_data:

networks:
  microservice-net:
    driver: bridge
